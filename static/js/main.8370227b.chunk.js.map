{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","console","log","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","alert","htmlFor","onChange","Component","mapDispatchToProps","post","connect","app","Post","syncPosts","posts","length","map","index","key","Loader","FetchedPosts","useDispatch","useSelector","fetchedPosts","loading","onClick","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","word","includes","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8370227b.chunk.js","sourcesContent":["import {CREATE_POST, HIDE_ALERT, HIDE_LOADER, REQUEST_POSTS, SHOW_ALERT, SHOW_LOADER} from \"./types\";\r\n\r\nexport function createPost(post) {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    }\r\n}\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        });\r\n        setTimeout(() => dispatch(hideAlert()), 2000)\r\n    }\r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n    // return async dispatch => {\r\n    //     try {\r\n    //         dispatch(showLoader());\r\n    //         const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\r\n    //         const json = await response.json();\r\n    //         dispatch({type: FETCH_POSTS, payload: json});\r\n    //         dispatch(hideLoader());\r\n    //     } catch (e) {\r\n    //         dispatch(showAlert('Что-то пошло не так'));\r\n    //         dispatch(hideLoader());\r\n    //     }\r\n    //\r\n    // }\r\n}\r\n","export const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const HIDE_LOADER = 'HIDE_LOADER';\r\nexport const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ text }) => {\r\n    return(\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            {text}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Alert;\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {createPost, showAlert} from \"../redux/actions\";\r\nimport Alert from \"./Alert\";\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        const {title} = this.state;\r\n\r\n        if (!title.trim()) {\r\n            return this.props.showAlert('Пост не может быть пустым!')\r\n        }\r\n\r\n        const newPost = {\r\n            title, id: Date.now().toString()\r\n        };\r\n\r\n        console.log(newPost);\r\n        this.props.createPost(newPost);\r\n        this.setState({title: ''})\r\n    };\r\n\r\n    changeInputHandler = event => {\r\n        event.persist();\r\n        this.setState(prev => ({...prev, ...{\r\n            [event.target.name]: event.target.value\r\n        }}))\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                {this.props.alert && <Alert text={this.props.alert}/>}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">Post title</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        value={this.state.title}\r\n                        name=\"title\"\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                </div>\r\n                <button className=\"btn btn-success\" type=\"submit\">Add post</button>\r\n                <hr/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    alert: state.app.alert\r\n});\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    createPost, showAlert\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\r\n","import React from \"react\";\r\n\r\nconst Post = ({post}) => {\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{post.title}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Posts = ({syncPosts}) => {\r\n    if (!syncPosts.length) {\r\n        return <p className='text-center'>No posts!</p>\r\n    }\r\n    return syncPosts.map((post, index) => <Post post={post} key={post.id}/>)\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Posts);\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n    return(\r\n        <div className=\"spinner-border text-info\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchPosts} from \"../redux/actions\";\r\nimport Post from \"./Post\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst FetchedPosts = () => {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector(state => state.posts.fetchedPosts);\r\n    const loading = useSelector(state => state.app.loading);\r\n\r\n    if (loading) {\r\n        return (\r\n            <Loader/>\r\n        )\r\n    }\r\n\r\n    if (!posts.length) {\r\n        return <button\r\n                className=\"btn btn-primary\"\r\n                onClick={() => dispatch(fetchPosts())}\r\n            >Download</button>\r\n    }\r\n    return posts.map(post => <Post post={post} key={post.id} />)\r\n};\r\n\r\nexport default FetchedPosts;\r\n","import React from 'react';\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n            <PostForm />\n        </div>\n      </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <h2>Sync Posts</h2>\n                <Posts/>\n            </div>\n            <div className=\"col\">\n                <h2>Async Posts</h2>\n                <FetchedPosts />\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CREATE_POST, FETCH_POSTS} from \"./types\";\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: []\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_POST:\r\n            return {...state, posts: [...state.posts, action.payload]};\r\n        case FETCH_POSTS:\r\n            return {...state, fetchedPosts: action.payload};\r\n        default: return state\r\n    }\r\n};\r\n","import {HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER} from \"./types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return {...state, loading: true};\r\n        case HIDE_LOADER:\r\n            return {...state, loading: false};\r\n        case SHOW_ALERT:\r\n            return {...state, alert: action.payload};\r\n        case HIDE_ALERT:\r\n            return {...state, alert: null};\r\n        default: return state\r\n    }\r\n};\r\n","import {combineReducers} from \"redux\";\r\nimport {postsReducer} from \"./postsReducer\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer\r\n});\r\n","import {CREATE_POST} from \"./types\";\r\nimport {showAlert} from \"./actions\";\r\n\r\nconst forbidden = ['fuck', 'spam', 'php'];\r\n\r\nexport function spamWordsMiddleware({ dispatch }) {\r\n    return function (next) {\r\n        return function (action) {\r\n            if (action.type === CREATE_POST) {\r\n                const found = forbidden.filter(word => action.payload.title.includes(word));\r\n                if (found.length) {\r\n                    return dispatch(showAlert('Вы спамер! Идите домой!'))\r\n                }\r\n            }\r\n            return next(action)\r\n        }\r\n    }\r\n}\r\n","import {takeEvery, put, call} from \"redux-saga/effects\";\r\nimport {FETCH_POSTS, REQUEST_POSTS} from \"./types\";\r\nimport {hideLoader, showAlert, showLoader} from \"./actions\";\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(fetchPosts);\r\n        yield put({ type: FETCH_POSTS, payload});\r\n        yield put(hideLoader())\r\n    } catch (e) {\r\n        yield put(showAlert('Что-то пошло не так'));\r\n        yield put(hideLoader());\r\n    }\r\n}\r\n\r\nasync function fetchPosts() {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\r\n    return await response.json();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {compose, createStore, applyMiddleware} from \"redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\nimport {Provider} from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {spamWordsMiddleware} from \"./redux/middleware\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {sagaWatcher} from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk, spamWordsMiddleware, saga),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\n\nsaga.run(sagaWatcher);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}